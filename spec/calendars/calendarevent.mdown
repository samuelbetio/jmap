# Calendar Events

A CalendarEvent contains information about an event, or recurring series of events, that takes place at a particular time. The object is designed to be easily convertible to/from iCalendar format ([@!RFC5545]) for compatibility with existing calendaring systems.

A **CalendarEvent** object has the following properties:

- **id**: `String`
  The id of the event. This property is immutable.

- **calendarId**: `String`
  The id of the calendar this event belongs to.

- **uid**: `String`
  The UID from iCalendar. Used to associate the event as the same across different systems, calendars and views.

- **relatedTo**: `String[String]|null`
  A map of relation-type to UID of the related event. Specified relation types are:

    - `first`: The first event in a series.
    - `next`: The next event in a series.

    If an event is split to make a "this and future" change to a recurrence, the original event should be truncated to end at the previous occurrence before this split, and a new event created to represent all the events after the split.

    A `next` *relatedTo* property SHOULD be set on the original event with the UID of the new event. A `first` *relatedTo* property with the UID of the first event in the series SHOULD be set on the new event. Clients can then follow these UIDs to get the complete set of events if the user wishes to modify them all at once. Maps to the RELATED-TO field in iCalendar.

- **prodId**: `String|null`
  The identifier for the product that created the Event object. The vendor of the implementation SHOULD ensure that this is a globally unique identifier.

- **created**: `UTCDate|null`
  The time this event was created. Maps to the CREATED field in iCalendar.

- **updated**: `UTCDate`
  The time this event was last changed. Maps to the DTSTAMP field in iCalendar.

- **sequence**: `Number` (Defaults to `0` if omitted)
  The SEQUENCE field from iCalendar.

- **title**: `String` (Defaults to `''` (the empty string) if omitted)
  A short summary of the event. This maps to the SUMMARY property in iCalendar.

- **description**: `String` (Defaults to `''` (the empty string) if omitted)
  A longer form description of the event. This is plain text, but a client SHOULD attempt to hyperlink URLs when displaying it. This maps to the DESCRIPTION property in iCalendar.

- **links**: `String[Link]|null`
  A map of of link id to Link objects, representing external resources associated with the event. A link id may be any string and need only be unique to this event, although the href or a UUID are practical choices. This maps to the ATTACH property in iCalendar.

    A **Link** object has the following properties:

    - **href**: `String`
      A URI from which the resource may be fetched. This MAY be a `data:` URL, but it is recommended that the file be hosted on a server.
    - **type**: `String|null` (optional, defaults to `null`)
      The content-type of the resource, if known.
    - **size**: `Number|null` (optional, defaults to `null`)
      The size, in bytes, of the resource when fully decoded (i.e. the number of bytes in the file the user would download), if known.
    - **rel**: `String` (optional, defaults to `related`)
      The value of the "rel" member is a string that is a [registered relation type](http://www.iana.org/assignments/link-relations/link-relations.xhtml) (see RFC [5988](https://tools.ietf.org/html/rfc5988)). The value identifies the relation of the linked resource to the event.

      Links with a *rel* of `enclosure` SHOULD be considered by the client as attachments for download.

      Links with a *rel* of `describedby` SHOULD be considered by the client to be an alternate representation of the *description*, for example an HTML page describing the event.
    - **title**: `String|null` (optional, defaults to `null`)
      A human-readable description of the resource.
    - **properties**: `String[String|null]|null` (optional, defaults to `null`)
      Extra metadata stored by a client about a link. The keys are URIs, which should be owned by the client author to avoid conflicts, and the values are strings or `null`.

- **locale**: `String|null`
  The [@!RFC5646] language tag that best describes the locale used for the event, if known.

- **localizations**: `String[PatchObject]|null`
  A map of [@!RFC5646] language tag to a patch object which localises the event into that locale.

  See the description of *recurrenceOverrides* for the structure of the PatchObject. The patches are applied to the top-level object. In **addition** to all the restrictions on patches specified there, the pointer also MUST NOT start with one of the following prefixes; any patch with a such a key MUST be ignored:

  - `sequence`
  - `localization`
  - `start`
  - `timeZone`
  - `duration`
  - `status`
  - `showAsFree`
  - `participants`
  - `useDefaultAlerts`

- **locations**: `String[Location]|null`
  A map of of location id to Location objects, representing locations associated with the event. A location id may be any string and need only be unique to this event, although a UUID is a practical choice.

    A **Location** object has the following properties. All properties are optional, but every Location object MUST have at least one property:

    - **name**: `String`
      The human-readable name of the location.
    - **accessInstructions**: `String`
      Human-readable instructions for accessing this location. This may be a set of directions, door access code, etc.
    - **rel**: `String`
      The relation type of this location to the event. This MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/customrel`. Any value the client or server doesn't understand should be treated the same as `unknown`.
      - `start`: The event starts at this location.
      - `end`: The event ends at this location.
      - `virtual`: This is not a physical location (e.g. this location is an online chat room where people will meet.)
      - `unknown`: The relation of this location to the event is unknown.
    - **timeZone**: `String` (IANA TZ name)
      A time zone for this location. If omitted, the event time zone MUST be used for this location.
    - **address**: `Address`
      The structured address of this location.

        An **Address** object has the following properties. All properties MUST
        be included, but may be the empty string:

        - **street**: `String`
          The street address. This MAY be multiple lines; newlines MUST be preserved.
        - **locality**: `String`
          The city, town, village, post town, or other locality within which the street address may be found.
        - **region**: `String`
          The province, such as a state, county, or canton within which the locality may be found.
        - **postcode**: `String`
          The postal code, post code, ZIP code or other short code associated with the address by the relevant country's postal system.
        - **country**: `String`
          The country name.

    - **coordinates**: `String`
      An [@!RFC5870] `geo:` URI for the location.
    - **uri**: `String`
      A URI that represents how to connect to the event from this location. This may be a telephone number (represented as `tel:+1-555-555-555`) for a teleconference, a web address for online chat, or a custom URI for something like Skype (e.g. `skype:username`).

When mapping from iCalendar, the LOCATION property should become a single location with just a *name* property. If the event has a different end time zone to start time zone, this should be added as a second location with just a *timeZone* property.

- **isAllDay**: `Boolean`
  Is the event an all day event, such as a birthday or public holiday? This corresponds to the type (DATE or DATE-TIME) of the DTSTART property in iCalendar.

- **start**: `LocalDate` e.g. `2015-09-02T00:00:00`
  The date/time the event would start in the event's time zone. This corresponds to the DTSTART property in iCalendar.

- **timeZone**: `String|null`
  The [IANA Time Zone Database](http://www.iana.org/time-zones) name for the event, or `null` for floating time. This corresponds to the TZID part of the DTSTART property. If omitted, this MUST be presumed to be `null`.

- **duration**: `Duration`, e.g. `P2DT3H` (Defaults to `P0D` if omitted)
  The duration of the event in absolute time (i.e. ignoring DST shifts, or UTC). To get the end date in the event time zone, convert start into UTC, then apply the duration, then convert the result into the appropriate time zone.

If *isAllDay* is `true`, then the following restrictions apply:

* the *start* property MUST have a time component of `T00:00:00`.
* the *timeZone* property MUST be `null`.
* the *duration* MUST only include a day component.

- **recurrenceRule**: `Recurrence|null`
  A recurrence rule for the event. This corresponds to the RRULE property in iCalendar.

    A **Recurrence** object is a JSON object mapping of a RECUR value type in iCalendar. A Recurrence object has the following properties:

    - **frequency**: `String`
      This MUST be one of the following values:
      - `"yearly"`
      - `"monthly"`
      - `"weekly"`
      - `"daily"`
      - `"hourly"`
      - `"minutely"`
      - `"secondly"`
      To convert from iCal, simply lower-case the FREQ part.
    - **interval**: `Number` (optional, defaults to `1`)
      The INTERVAL part from iCal. If included, it MUST be an integer `x >= 1`.
    - **rscale**: `String` (optional, defaults to `"gregorian"`)
      The RSCALE part from iCal RSCALE (RFC7529), converted to lower-case.
    - **skip**: `String` (optional, defaults to `"omit"`)
      The SKIP part from iCal RSCALE (RFC7529), converted to lower-case.
    - **firstDayOfWeek**: `String` (optional, defaults to `"monday"`)
      The WKST part from iCal, represented as a lower-case two-letter English day of the week. If included, it MUST be one of the following values: `"mo"|"tu"|"we"|"th"|"fr"|"sa"|"su"`
    - **byDay**: `NDay[]` (optional)
      The BYDAY part from iCal. The array MUST have at least one entry if included.

      An **NDay** object has the following properties:

      - **day**: `String`
        The day-of-the-week part of the BYDAY value in iCal, lower-cased. MUST be one of the following values: `"mo"|"tu"|"we"|"th"|"fr"|"sa"|"su"`.
      - **nthOfPeriod**: `Number` (optional)
        If present, rather than representing *every* Friday (for example), it represents only a specific instance within the period (month for monthly recurrences, year for yearly recurrences). Must be a non-zero integer, negative integers means nth-last of period. This is the `"+1"` or `"-3"` etc. prefix from the BYDAY values in iCal.

    - **byDate**: `Number[]` (optional)
      The BYMONTHDAY part from iCal. The array MUST have at least one entry if included.
    - **byMonth**: `String[]` (optional)
      The BYMONTH part from iCal. Each entry is a string representation of a number, starting from "1" for the first month in the calendar (e.g. "1" means "January" with Gregorian calendar), with an optional "L" suffix for leap months (this MUST be upper-case, e.g. "3L"). The array MUST have at least one entry if included.
    - **byYearDay**: `Number[]` (optional)
      The BYYEARDAY part from iCal. The array MUST have at least one entry if included.
    - **byWeekNo**: `Number[]` (optional)
      The BYWEEKNO part from iCal. The array MUST have at least one entry if included.
    - **byHour**: `Number[]` (optional)
      The BYHOUR part from iCal. The array MUST have at least one entry if included.
    - **byMinute**: `Number[]` (optional)
      The BYMINUTE part from iCal. The array MUST have at least one entry if included.
    - **bySecond**: `Number[]` (optional)
      The BYSECOND part from iCal. The array MUST have at least one entry if included.
    - **bySetPosition**: `Number[]` (optional)
      The BYSETPOS part from iCal. The array MUST have at least one entry if included.
    - **count**: `Number` (optional)
      The COUNT part from iCal. This MUST NOT be included if an *until* property is specified.
    - **until**: `LocalDate` (optional)
      The UNTIL part from iCal. This MUST NOT be included if a *count* property is specified. Note, as in iCal, this date is presumed to be in the timezone specified in *timeZone*. It is not a UTC time.

- **recurrenceOverrides**: `LocalDate[PatchObject|null]|null`
  A combination of RDATE and EXDATE from iCalendar, and event instances with recurrence ids.

    The object is a map of the Recurrence-Id (i.e. the date-time of the start of the occurrence) to either `null`, to indicate the occurrence should be deleted, or an object of patches to apply to the generated Event occurrence object.

    If the Recurrence-Id does not match an expanded start date from a recurrence rule, it is to be treated as an additional occurrence (like an RDATE from iCalendar). The patch object may often be empty in this case.

    By default, an occurrence inherits all properties from the main event except the *start* date-time, which is shifted to the new start time. However, individual properties of the occurrence can be modified by a patch, or multiple patches.

    A **PatchObject** is of type `String[*|null]`, and represents an unordered set of patches to apply to the generated occurrence Event object.

    The keys are a path in a subset of [@!RFC6901] JSON pointer format, with an implicit leading `/` (i.e. prefix each key with `/` before applying the JSON pointer evaluation algorithm).

    A pointer MUST NOT start with one of the following prefixes; any patch with a such a key MUST be ignored:

    - `uid`
    - `relatedTo`
    - `prodId`
    - `isAllDay`
    - `recurrenceRule`
    - `recurrenceOverrides`
    - `replyTo`
    - `participantId`

    The pointer MUST NOT reference inside an array (i.e. you MUST NOT insert/delete from an array; the array MUST be replaced in its entirety instead). Any patch with a key that attempts to do this MUST be ignored.

    When evaluating a path, all parts prior to the last (i.e. the value after the final slash) MUST exist for the patch to be valid. If not, the patch MUST be ignored.

    There MUST NOT be two patches in the PatchObject where the pointer of one is the prefix of the pointer of the other, e.g. `alerts/1/offset` AND `alerts`. The result in this case is undefined.

    The value associated with each pointer is either:

    - `null`: Remove the property. If not present in the parent, this a no-op.
    - Anything else: The value to replace the inherited property on the occurrence with (if present) or add to the occurrence (if not present).

- **status**: `String` (Defaults to `confirmed` if omitted)
  The status of the event. MUST be one of:

    - `"confirmed"`: Indicates event is definite
    - `"cancelled"`: Indicates event was cancelled.
    - `"tentative"`: Indicates event is tentative.

    This maps from the STATUS property from iCalendar, converted to lower-case.

- **showAsFree**: `Boolean` (Defaults to `false` if omitted)
  If true, the event should be ignored when calculating free/busy data for the
  user. This maps to the TRANSP property in iCalendar (`false <=> OPAQUE`, `true <=> TRANSPARENT`).

- **replyTo**: `String[String]|null`
  Represents methods by which a participant may RSVP to the organizer of the event. The keys in the object are the available methods. The value is a uri to use that method. Future methods may be defined in future specications; a calendar client MUST just ignore any method it does not understand.

  The following methods are defined:

  - `imip`: The organizer accepts an iMIP ([@!RFC6047]) response. The value MUST be a `mailto:` uri. This maps to the email address of the ORGANIZER in iCalendar.
  - `web`: There is a web page where the user may submit an RSVP using their browser. The value MUST be an `http:` or `https:` uri.

- **participants**: `String[Participant]|null`
  A map of calendar-user-id to an object describing their participation in the event. This is a combination of the ORGANIZER and ATTENDEES properties from iCalendar.

    A **Participant** object has the following properties. Properties are mandatory unless marked otherwise:

    - **name**: `String`
      The display name of the calendar user (e.g. "Joe Bloggs").
    - **email**: `String`
      The email address for the calendar user (in many systems, but not in all – but not all – this is the same as the calendar user id, the key for this object in the participants map).
    - **kind**: `String` (optional, defaults to "unknown")
      What kind of entity this participant is. This is the CUTYPE parameter in iCalendar. This MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/specialkind`. Any value the client or server doesn't understand should be treated the same as `unknown`.
      - `individual`: a single person
      - `group`: a collection of people invited as a whole
      - `resource`: a non-human resource, e.g. a projector
      - `location`: a physical location involved in the event that needs to be scheduled, e.g. a conference room.
      - `unknown`: no information is available about the kind of this participant.
    - **roles**: `String[]`
      A list of roles that this participant fulfils. At least one value MUST be specified for the participant. This MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/specialkind`. Any value the client or server doesn't understand should be preserved but ignored.
      - `owner`: The participant is an organizer of the event, and allowed to make alterations to any part of the event.
      - `attendee`: The participant is an attendee of the event.
      - `chair`: The participant is in charge of the event when it occurs.
    - **locationId**: `String|null` (optional, defaults to `null`)
      The location at which this person is expected to be attending this event.
      If the value does not correspond to any location id in the *locations*
      property of the instance, this MUST be treated the same as if the
      participant's *locationId* were specified as `null`.
    - **scheduleStatus**: `String` (optional, defaults to 'needs-action')
      This maps to the PARTSTAT parameter in iCalendar, converted to lower case. The value MUST be one of the following, or defined in a future RFC or extension to iCalendar:
      - `needs-action`: No status yet set by the participant.
      - `accepted`: The participant will attend the event.
      - `declined`: The participant may attend the event.
      - `tentative`: The participant will not attend the event.
    - **schedulePriority**: `String` (optional, defaults to "required")
      This maps to the ROLE parameter in iCalendar. It MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/specialkind`. Any value the client or server doesn't understand should be treated the same as `required`.
      - `non-participant`: Indicates a participant who is copied for information purposes only.
      - `optional`: Indicates a participant whose participation is optional.
      - `required`: Indicates a participant whose participation is required.
    - **scheduleRSVP**: `Boolean` (optional, defaults to `false`)
      If `true`, the organizer is expecting the participant to notify them of their status. This maps to the RSVP parameter in iCalendar.
    - **scheduleUpdated**: `UTCDate|null` (optional, defaults to `null`)
      The *updated* property of the last response from the user. This can be
      compared to the *updated* timestamp in future iMIP responses to determine
      if the response is older or newer than the current data.
    - **memberOf**: `String[]` (optional)
      A list of group addresses that were invited to this event, which caused this participant to be invited due to their membership of the group(s). MUST be omitted if none (rather than an empty array).

- **participantId**: `String|null`
  The id of the participant in the *participants* object which belongs to the account this event belongs to.

- **useDefaultAlerts**: `Boolean` (Defaults to `false` if omitted)
  If `true`, use the user's default alerts for this event and ignore the
  *alerts* property.

- **alerts**: `String[Alert]|null`
  A map of of alert id to Alert objects, representing alerts/reminders to display or send the user for this event. This maps to the VALARM property in iCalendar. An alert id may be any string and need only be unique to this event, although a UUID is a practical choice.

    An **Alert** Object has the following properties:

    - **relativeTo**: `String` (optional, defaults to `"before-start"`)
      This specifies where the offset is relative to for the alarm to trigger.
      The value MUST be one of:
      - `"before-start"`
      - `"after-start"`
      - `"before-end"`
      - `"after-end"`
    - **offset**: `Duration`
      The offset from the start/end of the event to fire the alert. Note, if the event is in floating time (including all-day events), the server SHOULD use the user's default time zone when determining the start time.
    - **action**: `DisplayAction|EmailAction|UnknownAction`
      How to alert the user. A *DisplayAction* means a message (which is service dependent, but SHOULD include the summary and start time of the event) SHOULD be shown to the user on any client connected to this account at the specified time. How this message is formatted (and any sound or other method of drawing the user's attention) is client specific. An *EmailAction* means the server MUST send an email as specified in the object at the specified time.

      Where a **DisplayAction** object has the following properties:

      - **type**: `String`
        The value MUST be `"display"`.
      - **acknowledged**: `UTCDate|null`
        When the user has permanently dismissed the alert the client SHOULD set this to the current time in UTC. Other clients which sync this property can then automatically dismiss or suppress duplicate alerts (alerts with the same alert id that triggered on or before this date-time). For a recurring event, the *acknowledged* property of the parent event SHOULD be updated, unless the alert is already overriden in *recurrenceOverrides*.
      - **snoozed**: `UTCDate|null`
        If the user temporarily dismisses the alert, this is the UTC date-time
        after which it should be reshown.

        Clients displaying this alert SHOULD hide it if the *snoozed* property is updated to a time in the future. When that time is reached, the alert SHOULD be reshown unless *acknowledged* is now after the **original** trigger time.

      Where an **EmailAction** object has the following properties:

      - **type**: `String`
        The value MUST be `"email"`.
      - **to**: `Emailer[]`
        An array of name/email objects to send the alert to. An **Emailer** object has the following properties:

        - **name**: `String`
          The name of the recipient. If not known, clients SHOULD use the empty string.
        - **email**: `String`
          The email address of the recipient.

      - **subject**: `String` (optional)
        The subject to use for the email. If omitted, this is implementation specific, but the server SHOULD try to choose an appropriate subject (such as "Event Summary: starting in 5 min").
      - **textBody**: `String` (optional)
        The plain-text body to use for the email. If omitted, the body of the email is implementation specific, but the server SHOULD include all pertinent details about the event, such as summary, location and start time.

      An **UnknownAction** object is an object that contains a `type` property whose value is not `"email"` or `"string"`, plus zero or more other properties. This is for compatibility with client extensions and future RFCs. The client or server SHOULD NOT trigger any type of alert for action types they do not understand, but MUST preserve them.

Any `null`able array/object property MUST be `null` rather than an empty array or object.

## getCalendarEvents

CalendarEvents can only be fetched explicitly by id. To fetch events, make a call to `getCalendarEvents`. It takes the following arguments:

- **accountId**: `String|null`
  The id of the account to use for this call. If not given, defaults to the primary account.
- **ids**: `String[]`
  An array of ids for the events to fetch.
- **properties**: `String[]|null`
  A list of properties to fetch for each event. If `null`, all properties will be fetched.

The `id` property is always returned, regardless of whether it is in the list of requested properties. The possible values for `properties` can be found above in the description of the CalendarEvent object.

The response to *getCalendarEvents* is called *calendarEvents*. It has the following arguments:

- **accountId**: `String`
  The id of the account used for the call.
- **state**: `String`
  A string encoding the current state on the server. This string will change
  if any events change (that is, an event is created, updated or deleted). It can be passed to *getCalendarEventUpdates* to efficiently get the list of changes from the previous state.
- **list**: `CalendarEvent[]`
  An array of CalendarEvent objects for the requested event ids. This may not be in the same order as the ids were in the request.
- **notFound**: `String[]|null`
  An array of calendar event ids requested which could not be found, or `null` if all ids were found.

The following errors may be returned instead of the *events* response:

`accountNotFound`: Returned if an *accountId* was explicitly included with the request, but it does not correspond to a valid account.

`accountNotSupportedByMethod`: Returned if the *accountId* given corresponds to a valid account, but the account does not support this data type.

`requestTooLarge`: Returned if the number of *ids* requested by the client exceeds the maximum number the server is willing to process in a single method call.

`invalidArguments`: Returned if the request does not include one of the required arguments, or one of the arguments is of the wrong type, or otherwise invalid. A *description* property MAY be present on the response object to help debug with an explanation of what the problem was.

## getCalendarEventUpdates

The *getCalendarEventUpdates* call allows a client to efficiently update the state of its cached calendar events to match the new state on the server. It takes the following arguments:

- **accountId**: `String|null`
  The id of the account to use for this call. If `null`, the primary account will be used.
- **sinceState**: `String`
  The current state of the client. This is the string that was returned as the *state* argument in the *calendarEvents* response. The server will return the changes made since this state.
- **maxChanges**: `Number|null`
  The maximum number of CalendarEvent ids to return in the response. The server MAY choose to clamp this value to a particular maximum or set a maximum if none is given by the client. If supplied by the client, the value MUST be a positive integer greater than 0. If a value outside of this range is given, the server MUST reject the call with an `invalidArguments` error.
- **fetchRecords**: `Boolean|null`
  If `true`, immediately after outputting a *calendarEventUpdates* response, an implicit call will be made to *getCalendarEvents* with the *changed* property of the response as the *ids* argument, and the *fetchRecordProperties* argument as the *properties* argument. If `false` or `null`, no implicit call will be made.
- **fetchRecordProperties**: `String[]|null`
  Passed through as the *properties* argument to any implicit *getCalendarEvents* call.

The response to *getCalendarEventUpdates* is called *calendarEventUpdates*. It has the following arguments:

- **accountId**: `String`
  The id of the account used for the call.
- **oldState**: `String`
  This is the *sinceState* argument echoed back; the state from which the server is returning changes.
- **newState**: `String`
  This is the state the client will be in after applying the set of changes to the old state.
- **hasMoreUpdates**: `Boolean`
  If `true`, the client may call *getCalendarEventUpdates* again with the *newState* returned to get further updates. If `false`, *newState* is the current server state.
- **changed**: `String[]`
  An array of CalendarEvent ids where a property of the event has changed between the old state and the new state, or the event has been created, and the event has not been destroyed.
- **removed**: `String[]`
  An array of CalendarEvent ids for events which have been destroyed since the old state.

If a *maxChanges* is supplied, or set automatically by the server, the server MUST ensure the number of ids returned across *changed* and *removed* does not exceed this limit. If there are more changes than this between the client's state and the current server state, the update returned SHOULD generate an update to take the client to an intermediate state, from which the client can continue to call *getCalendarEventUpdates* until it is fully up to date. If it is unable to calculate an intermediate state, it MUST return a `cannotCalculateChanges` error response instead.

If an event has been modified AND deleted since the oldState, the server should just return the id in the *removed* array, but MAY return it in the *changed* array as well. If an event has been created AND deleted since the oldState, the server SHOULD remove the event id from the response entirely, but MAY include it in the *removed* array.

The following errors may be returned instead of the `calendarEventUpdates` response:

`accountNotFound`: Returned if an *accountId* was explicitly included with the request, but it does not correspond to a valid account.

`accountNotSupportedByMethod`: Returned if the *accountId* given corresponds to a valid account, but the account does not support this data type.

`invalidArguments`: Returned if the request does not include one of the required arguments, or one of the arguments is of the wrong type, or otherwise invalid. A `description` property MAY be present on the response object to help debug with an explanation of what the problem was.

`cannotCalculateChanges`: Returned if the server cannot calculate the changes from the state string given by the client. Usually due to the client's state being too old, or the server being unable to produce an update to an intermediate state when there are too many updates. The client MUST invalidate its CalendarEvent cache.

## setCalendarEvents

Modifying the state of CalendarEvent objects on the server is done via the *setCalendarEvents* method. This encompasses creating, updating and destroying CalendarEvent records.

The *setCalendarEvents* method takes the following arguments:

- **accountId**: `String|null`
  The id of the account to use for this call. If `null`, the primary account will be used.
- **ifInState**: `String|null`
  This is a state string as returned by the *getCalendarEvents* method. If supplied, the string must match the current state, otherwise the method will be aborted and a `stateMismatch` error returned. If `null`, any changes will be applied to the current state.
- **create**: `String[CalendarEvent]|null`
  A map of *creation id* (an arbitrary string set by the client) to CalendarEvent objects (containing all properties except the id).
- **update**: `String[CalendarEvent]|null`
  A map of id to CalendarEvent objects. The object may omit any property; only properties that have changed need be included.
- **destroy**: `String[]|null`
  A list of ids for CalendarEvent objects to permanently delete.

Each create, update or destroy is considered an atomic unit. It is permissible for the server to commit some of the changes but not others, however it is not permissible to only commit part of an update to a single event (e.g. update the *start* property but not the *timeZone* property if both are supplied in the update object).

If a create, update or destroy is rejected, the appropriate error MUST be added to the notCreated/notUpdated/notDestroyed property of the response and the server MUST continue to the next create/update/destroy. It does not terminate the method.

If an id given cannot be found, the update or destroy MUST be rejected with a `notFound` set error.

CalendarEvents reference a Calendar object. When events are created or modified, they may reference a calendar being created *in the same API request* by using the creation id prefixed with a `#`. The order of the method calls in the request by the client MUST be such that the calendar being referenced is created in an earlier call. The server thus never has to look ahead. Instead, while processing a request (a series of method calls), the server MUST keep a simple map for the duration of the request of creation id to Calendar id for each newly created calendar, so it can substitute in the correct value if necessary in later method calls. Creation ids sent by the client SHOULD be unique within the single API request for a particular data type. If a creation id is reused, the server MUST map the creation id to the most recently created item with that id.

To add new attachments, the file must first be uploaded using the standard upload mechanism (see the File Uploads section of this spec). This will give the client a valid blobId/size/type to use.

When an event is created, updated or destroyed, the server MUST also ensure the following:

- Any alerts are scheduled/cancelled correctly..
- If there is a *participantId*, and the corresponding participant has a *role*
  of `owner`:
  - If an event is created/updated: send a REQUEST iMIP email with the event as
    an ICS attachment to all participants that are not "you".
  - When an event is destroyed, if it is in the future, then email all
    participants other than you the appropriate iMIP email to inform them that the event has been cancelled. If it is in the past, the server SHOULD NOT send a message.
- If there is a *participantId*, and the corresponding participant does not have a *role* of `owner`, and the *scheduleStatus* is updated for this participant, send the appropriate iMIP email to the *replyTo* address.

The response to *setCalendarEvents* is called *calendarEventsSet*. It has the following arguments:

- **accountId**: `String`
  The id of the account used for the call.
- **oldState**: `String|null`
  The state string that would have been returned by *getCalendarEvents* before making the requested changes, or `null` if the server doesn't know what the previous state string was.
- **newState**: `String`
  The state string that will now be returned by *getCalendarEvents*.
- **created**: `String[CalendarEvent]`
  A map of the creation id to an object containing the **id** property for all successfully created events
- **updated**: `String[CalendarEvent|null]`
  The *keys* in this map are the ids of all events that were successfully updated. If the server made any other changes to the record beyond those explicitly requested by the client, the *value* for the corresponding id in the map is an object containing the updated value of each property the **server changed**. Otherwise (if no properties changed on the server other than those explicitly updated by the client), the value is `null`.
- **destroyed**: `String[]`
  A list of ids for events that were successfully destroyed.
- **notCreated**: `String[SetError]`
  A map of creation id to a SetError object for each event that failed to be created. The possible errors are defined in the description of the method for specific data types.
- **notUpdated**: `String[SetError]`
  A map of CalendarEvent id to a SetError object for each event that failed to be updated. The possible errors are defined in the description of the method for specific data types.
- **notDestroyed**: `String[SetError]`
  A map of CalendarEvent id to a SetError object for each event that failed to be destroyed. The possible errors are defined in the description of the method for specific data types.

A **SetError** object has the following properties:

- **type**: `String`
  The type of error.
- **description**: `String|null`
  A description of the error to display to the user.

If any of the properties in a create or update are invalid (immutable and different to the current server value, wrong type, invalid value for the property – like a *calendarId* for a non-existent calendar), the server MUST reject the create/update with a SetError of type `invalidProperties`. The SetError object SHOULD contain a property called *properties* of type `String[]` that lists **all** the properties that were invalid. The object MAY also contain a *description* property of type `String` with a user-friendly description of the problems.

The following errors may be returned instead of the *calendarEventsSet* response:

`accountNotFound`: Returned if an *accountId* was explicitly included with the request, but it does not correspond to a valid account.

`accountNotSupportedByMethod`: Returned if the *accountId* given corresponds to a valid account, but the account does not support this data type.

`accountReadOnly`: Returned if the account has `isReadOnly == true`.

`requestTooLarge`: Returned if the total number of objects to create, update or destroy exceeds the maximum number the server is willing to process in a single method call.

`invalidArguments`: Returned if one of the arguments is of the wrong type, or otherwise invalid. A *description* property MAY be present on the response object to help debug with an explanation of what the problem was.

`stateMismatch`: Returned if an *ifInState* argument was supplied and it does not match the current state.
