# Authentication

When connecting to any JMAP server, the client must first gain an access token. It cannot just use a username/password directly. This allows the server to know (and show the user) which clients currently have access to the account, and to be able to revoke access individually.

The server may support multiple different mechanisms for authenticating a user to gain the access token. It is expected that further types may be added in future extensions to the JMAP specification.


## Service autodiscovery

To begin authentication, the client needs to know the authentication URL for the JMAP server.

There are two standardised autodiscovery methods in use for internet protocols:

- **DNS srv**
  See [@!RFC6186] and [@!RFC6764]
- **.well-known/servicename**
  See [@!RFC5785]

A JMAP-supporting host for the domain `example.com` SHOULD publish a SRV record `_jmaps._tcp.example.com` which gives a *hostname* and *port* (usually port `443`). The authentication URL is then `https://${hostname}[:${port}]/.well-known/jmap` (following any redirects).

If the client has a username in the form of an email address, it MAY use the domain portion of this to attempt autodiscovery of the JMAP server.

To support clients that are unable to do SRV lookups, the server SHOULD make the *hostname* the same domain as the username if possible.


## Getting an access token

Authorization always starts with the client making a POST request to the authentication URL (found either via service autodiscovery or manual entry). The request MUST be of type `application/json` and specify an `Accept: application/json` header. The body of the request MUST be a single JSON object, encoded in UTF-8, with the following properties:

- **username**: `String`
  The username the client wishes to authenticate. This is normally the primary email address of the user.
- **clientName**: `String`
  The name of the client software. e.g. `Mozilla Thunderbird`.
- **clientVersion**: `String`
  Information to identify the version of the client.  This MUST change for any changed client code (e.g. a version control tag or counter for development software) and SHOULD sort lexically later for newer versions.
- **deviceName**: `String`
  A human-friendly string to identify the device making the request, e.g. "Joe Blogg's iPhone".

The server may use the client/device information to help identify the login to the user in a login log or other security reporting. Although hopefully unnecessary, they may also be helpful for working around client bugs in the future.

The server will respond with one of the following HTTP status codes:

### 200: Success, but more authorization required.

The response body will be a single JSON object with the following properties.

- **loginId**: `String`
  An id from the server to allow it to connect the next request with previous requests in the login process. This SHOULD be of limited time validity (e.g. 15 minutes from previous call).
- **methods**: `AuthMethod[]`
  A list of the supported authentication methods to continue with authentication. See below for definition of the **AuthMethod** object.
- **prompt**: `String|null`
  A message to display in the client to the user. The client MUST treat this as plain text, but SHOULD automatically hyperlink any URLs it finds if a system browser is available.

This is the standard response to an initial request. Note, a server may return this even if the username is not actually active, to prevent enumeration. The client should then pick one of the *methods* from the list in the response to continue with authentication (if no methods supported by the client are in the list, it will not be able to get an access token).

An **AuthMethod** object MUST have a **type** property. This is a `String` representing the method of authentication. For some types, there may be other values required on the AuthMethod object in addition; see the description of types below. The following types are currently defined, but more may be added in the future. A client SHOULD offer the user the option to choose any of the method types returned that the client supports. The client MUST ignore any types it does not understand:

- `external`: The user must do something out-of-band to authorize the app. The server SHOULD use the *prompt* property of the response to tell the user what they need to do. A client that supports the *external* authorisation type MUST offer a mechanism for the user to indicate to the client when they have completed the out-of-band authentication.
- `oauth`: OAuth based authentication. For OAuth integration, see the docs of the service in question, since every service implements it slightly differently and the client must register with the service beforehand to use it. If using this method, an access token is obtained entirely through the OAuth mechanism from this point on, and requests will be authenticated as per the OAuth spec. See the "Refetching URL endpoints" section below for how to obtain the URL endpoints after successfully authenticating using OAuth.
- `password`: The user must input their current password for the account.
- `totp`: The user must input a [TOTP](https://tools.ietf.org/html/rfc6238) code from a device registered with the account.
- `yubikeyotp`: The user must input a [Yubico OTP](https://developers.yubico.com/OTP/) code from a Yubikey registered with the account.
- `u2f`: The user must sign a challenge using a [FIDO U2F](https://fidoalliance.org/specifications/download/) key registered with the account. The AuthMethod object for this type MUST also have the following properties:

  - **appId**: `String`
    The app id to use.
  - **signChallenge**: `String`
    The challenge to be signed by the U2F key.
  - **registeredKeys**: `RegisteredKey[]`
    The keys associated with this user. A **RegisteredKey** object has the
    following properties:

    - **version**: `String`
      The U2F protocol version.
    - **keyHandle**: `String`
      The key handle of the registered key.

- `sms`: The user must input a one-time code sent via SMS to a phone number registered with the account. The AuthMethod object for this type MUST also have the following property:

  - **phoneNumbers**: `LoginPhone[]|null`
    An array of **LoginPhone** objects, each of which represents a phone registered with the account. A **LoginPhone** object has the following properties:

      - **id**: `String`
        The id of the phone. This is used when asking the server to send a code.
      - **number**: `String`
        The phone number to display to the user to remind them which number the SMS will be/was sent to. This MAY have some characters replaced with an `X` or other "blanked-out" character if the server does not wish to disclose the full phone number at this point. e.g. if the phone registered with the account is `+61 123 456 789`, the server might return
        `+61 1XX XXX X89` as the number.
      - **isCodeSent**: `Boolean`
        Has the verification code been sent to this number yet? The server MAY choose to send the SMS before the first time this auth option is returned, or may wait for the user to explicitly request it.

If not using `"oauth"`, the user will at some point indicate to the client to continue authentication (after inputing any required token/code/password dependent on the auth method chosed). At this point the client submits a POST request to the same URL as before, with the body being a single JSON object with the following properties:

- **loginId**: `String`
  The *loginId* the server sent from the previous request.
- **type**: `String`
  The type of the method chosen to continue authentication.
- **value**: `*`
  The value as appropriate for the given type:
  - `external`: `null`
  - `password`/`totp`/`yubikeyotp`/`sms`: `String` – the password/one-time code.
  - `u2f`: `SignResponse` – an object with *keyHandle*, *signatureData* and *clientData* `String` properties, as defined in the U2F spec.

Note: The client SHOULD NOT store any password/code the user has entered beyond what is required to submit it to the server in this step.

The server will then return one of the same set of responses as before, which should be handled the same (for example, if two-factor authentication is required, a `200` response may be returned again and TOTP/U2F prompted for).

If the user chooses to authenticate using SMS, they may need to request the server to send the code to a particular number before they can submit a code. To do this, the client submits a POST request to the same URL as before, with the body being a single JSON object with the following properties:

- **loginId**: `String`
 The *loginId* the server sent from the previous request.
- **sendCodeTo**: `String`
 The id of the phone number to send the code to.

The server SHOULD send the code to the given phone if the phone id is valid. If the code has already been sent, it is server-dependent whether it is sent again or ignored. The server MUST return one of the same set of responses as before, which should be handled the same (in most cases this will be a `200` response identical to before except that the *isCodeSent* property for the phone will now be `true`).

### 201: Authentication is complete, access token created.

The response body will be a single JSON object with the following properties.

- **username**: `String`
  The username that was successfully authenticated.
- **accessToken**: `String`
  The secret token to be used by the client to authenticate all future JMAP requests. The client should keep this secure, preferably in an OS keychain or the like. Since tokens should not be reused across devices or clients, the client SHOULD NOT reveal this token to the user.
- **signingId**: `String`
  The id to put in the [JWT](https://tools.ietf.org/html/rfc7519) for signed GET requests (see below). This is used to allow the server to find the session so it can find the signing key to use to verify the token. You MUST NOT be able to derive the *accessToken* or *signingKey* from the *signingId*.
- **signingKey**: `String`
  The secret key to use for signing the [JWT](https://tools.ietf.org/html/rfc7519) for signed GET requests (see below), encoded as base64url as specified in ([@!RFC4648]). The client should keep this secure, preferably in an OS keychain or the like. Since keys should not be reused across devices or clients, the client SHOULD NOT reveal this token to the user.
- **accounts**: `String[Account]`
  A map of **account id** to Account object for each account the user has access to.

    A single access token may provide access to multiple accounts, for example if another user is sharing their mail with the logged in user, or if there is an account that contains data for a group or business.

    All data belongs to a single account. With the exception of a few explicit operations to copy data between accounts, all JMAP methods take an *accountId* argument that specifies on which account the operations are to take place. This argument is always optional; if not specified, the primary account is used. All ids (other than Account ids of course) are only unique within their account.

    In the event of a severe internal error, a server may have to reallocate ids or do something else that violates standard JMAP data constraints. In this situation, the data on the server is no longer compatible with cached data the client may have from before. The server MUST treat this as though the account has been deleted and then recreated with a new account id. Clients will then be forced to throw away any data with the old account id and refetch all data from scratch.

    An **Account** object has the following properties:

    - **name**: `String`
      A user-friendly string to show when presenting content from this account, e.g. the email address representing the owner of the account.
    - **isPrimary**: `Boolean`
      This MUST be true for **at most** one of the accounts returned. This is to be considered the user's main or default account by the client. If no account being returned belongs to the user, or in any other way there is no appropriate way to determine a default account, then this MAY be `false` for all accounts.
    - **isReadOnly**: `Boolean`
      This is `true` if the entire account is read-only.
    - **hasDataFor**: `String[]`
      A list of the data profiles available in this account. Each future JMAP data types specification will define a profile name to encompass that set of types.
- **capabilities**: `String[Object]`
  An object specifying the capabilities of this server. The keys are URIs, which specify the specifications supported by the server. The value for each of these keys is an object that MAY include further information about the server's capabilities in relation to that spec.

    The client MUST ignore any properties it does not understand.

    The capabilities object MUST include a property called `{TODO: URI for this spec}`. The value of this property is an object which SHOULD contain the following information on server capabilities:

    - **maxSizeUpload**: `Number`
      The maximum file size, in bytes, that the server will accept for a single file upload (for any purpose).
    - **maxConcurrentUpload**: `Number`
      The maximum number of concurrent requests the server will accept to the upload endpoint.
    - **maxSizeRequest**: `Number`
      The maximum size, in bytes, that the server will accept for a single
      request to the API endpoint.
    - **maxConcurrentRequests**: `Number`
      The maximum number of concurrent requests the server will accept to
      the API endpoint.
    - **maxCallsInRequest**: `Number`
      The maximum number of method calls the server will accept in a single request to the API endpoint.
    - **maxObjectsInGet**: `Number`
      The maximum number of obje ts that the client may request in a single `getFoos` type method call.
    - **maxObjectsInSet**: `Number`
      The maximum number of objects the client may send to create, update or destroy in a single `setFoos` type method call.

    Future specifications will define their own properties on the capabilities object.
- **apiUrl**: `String`
  The URL to use for JMAP API requests.
- **downloadUrl**: `String`
  The URL endpoint to use when downloading files (see the Download section of this spec), in [@!RFC6570] URI Template (level 1) format. The URL MUST contain variables called `accountId` and `blobId`. The URL SHOULD contain a variable called `name`.
- **uploadUrl**: `String`
  The URL endpoint to use when uploading files (see the Upload section of this spec).
- **eventSourceUrl**: `String`
  The URL to connect to for push events (see the Push section of this spec).

URLs are returned only after logging in. This allows different URLs to be used for users located in different geographic datacentres within the same service.

Note, if authentication is done via IP or mobile subscriber ID or some similar mechanism, a `201` response MAY be returned in response to the initial request (with just the username and client info).

### 400: Malformed request

The request is of the wrong content type, or does not contain data in the expected format. The client MUST NOT retry the same request. There is no content in the response.

### 403: Authentication step failed, but client may try again

Returned in response to a continuation request which failed (e.g. the password entered was not correct, or the out-of-band step was not completed successfully). The response body will be a single JSON object with the same properties as the `200` response, and the client may try again.

### 404: Not found

The JMAP authentication server is not available at this address. The client needs to rediscover the authentication URL. There is no content in the response.

### 410: Restart authentication

The login attempt has failed permanently. This may be due to a password being incorrect, the login id expiring, or any other reason. The client MUST restart authentication (go back to sending the username and client info to the server). There is no content in the response.

### 429: Rate limited

Returned if the server is temporarily blocking this IP/client from authenticating. This may be due to too many failed password attempts, or detected username enumeration attempts, or any other reason. (Legitimate) clients should wait a while then try again. There is no content in the response.

### 500: Internal server error

Something has gone wrong internally, and the server is in a broken state. Don't automatically retry. There is no content in the response.

### 503: Service unavailable

The server is currently down. Try again later with exponential backoff. There is no content in the response.


## Refetching URL endpoints

A server MAY (although SHOULD NOT) move end points for any services other than authentication at any time. If a request to the API/file upload/event source endpoint returns a `404`, the client MUST refetch the URL endpoints. To do this, it should make an authenticated GET request to the authentication URL (see below for how to authenticate requests).

For OAuth logins, this is how the URLs may be fetched initially as well.

The server MUST respond with one of the following status codes:

### 201: Authentication is complete, access token created.

The request was successful. The response will be of type `application/json` and consists of a single JSON object containing the following properties:

- **username**: `String`
  The username that was successfully authenticated.
- **accounts**: `String[Account]`
  An object representing the accounts the user has access to. See the full description above.
- **capabilities**: `String[Object]`
  An object specifying the capabilities of this server. See the full description above.
- **apiUrl**: `String`
  The URL to use for JMAP API requests.
- **downloadUrl**: `String`
  The URL endpoint to use when downloading files (see above).
- **uploadUrl**: `String`
  The URL endpoint to use when uploading files (see the Upload section of this spec).
- **eventSourceUrl**: `String`
  The URL to connect to for push events (see the Push section of this spec).

### 403: Restart authentication

The `Authorization` header was missing or did not contain a valid token. Reauthenticate and then retry the request. There is no content in the response.

### 404: Not found

The JMAP server is no longer here. There is no content in the response.

### 500: Internal server error

Something has gone wrong internally, and the server is in a broken state. Don't automatically retry. There is no content in the response.

### 503: Service unavailable

The server is currently down. Try again later with exponential backoff. There is no content in the response.


## Revoking an access token

The validity of an access token is determined by the server. It may be valid for a limited time only, or expire after a certain time of inactivity, or be valid indefinitely etc. If an access token expires, it MUST NOT be resurrected. The client MUST restart the authentication process to get a new access token.

For OAuth, see the provider's documentation on revoking access tokens.

Otherwise, a client may revoke an access token at any time by making an authenticated DELETE HTTP request to the authentication URL (the one used to get the token in the first place). The response from the server will be one of the following:

### 204: Success

The access token has now been revoked. There is no content in the response.

### 401: Unauthorized

Failed due to missing `Authorization` header, or the `Authorization` header did not contain a valid access token. As per the HTTP spec, the response MUST have a `WWW-Authenticate: Bearer` header. There is no content in the response.


## Authenticating HTTP requests

All HTTP requests other than to the authentication URL must be authenticated. To do this, the client MUST add an `Authorization` header to each request.

Once authenticated, the client will have an access token. This is used with the `Bearer` scheme as specified in [@!RFC6750] to authenticate HTTP requests.

For example, if *user@example.com* successfully logged in and the client received an *accessToken* of `abcdef1234567890`, to authenticate requests you would add the following header:

    Authorization: Bearer abcdef1234567890

### Signed GET requests

Sometimes, particularly in the browser context, authenticating a GET request using the usual `Authorization` header is not easily implemented. In such situations, a client may use a signed request instead.

Instead of the `Authorization` header, a signed request has an `access_token` query parameter, the value of which is an [@!RFC7519] [JSON Web Token](https://jwt.io/) constructed as follows:

* The algorithm MUST be HMAC SHA-256.
* The JWT MUST contain the following set of claims:
  - **iss**: `String` The *signingId* value returned after authentication.
  - **sub**: `String` The origin + path of the URL being signed,
    (i.e. the full URL excluding query parameters).
  - **iat**: `Number` The time the client created this JWT, in seconds since
    1970-01-01T00:00:00Z.
* The JWT MUST be signed using the *signingKey* returned after authentication
  as the key.

To verify, a server MUST:
* Ensure the algorithm is set to HMAC SHA-256.
* Verify the URL being requested matches that in the *sub* claim.
* Decode the payload and look up the session using the *iss* claim, ensure it is still valid, and then verify the JWT signature is valid using the session's *signingKey*.

The server MAY choose to only allow tokens to be valid for a limited amount of time after the client created it, as determined by the *iat* claim.
