# Introduction

JMAP is a generic protocol for synchronising data, such as mail, calendars or contacts, between a client and a server. It is optimised for mobile and web environments, and aims to provide a consistent interface to different data types.

This specification is for the generic mechanism of authentication and synchronisation. Further specifications define the data models for different data types that may be synchronised via JMAP.

JMAP is designed to make efficient use of limited network resources. Multiple API calls may be batched in a single request to the server, reducing round trips and improving battery life on mobile devices. Push connections remove the need for polling, and an efficient delta update mechanism ensures a minimum of data is transferred.

JMAP is designed to be horizontally scalable to a very large number of users. This is facilitated by the separate end points for users after login, the separation of binary and structured data, and a shared data model that does not allow data dependencies between accounts.

## Notational Conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [@!RFC2119].

The underlying format used for this specification is JSON. Consequently, the terms "object" and "array" as well as the four primitive types (strings, numbers, booleans, and null) are to be interpreted as described in Section 1 of [@!RFC7159].

Some examples in this document contain "partial" JSON documents used for illustrative purposes.  In these examples, three periods "..." are used to indicate a portion of the document that has been removed for compactness.

Types signatures are given for all JSON objects in this document. The following conventions are used:

* `Boolean|String` – The value is either a JSON `Boolean` value, or a JSON `String` value.
* `Foo` – Any name that is not a native JSON type means an object for which the properties (and their types) are defined elsewhere within this document.
* `Foo[]` – An array of objects of type `Foo`.
* `String[Foo]` – A JSON `Object` being used as a map (associative array), where all the values are of type `Foo`.

## JSON as the data encoding format

JSON is a text-based data interchange format as specified in [@!RFC7159]. The I-JSON format defined in [@!RFC7493] is a strict subset of this, adding restrictions to avoid potentially confusing scenarios (for example, it mandates that an object MUST NOT have two properties with the same key).

All data sent from the client to the server or from the server to the client (except binary file upload/download) MUST be valid I-JSON according to the RFC, and is therefore case-sensitive and encoded in UTF-8 ([@!RFC3629]).

## Terminology

### User

A user represents a set of permissions relating to what data can be seen. To  access data in JMAP, you first authenticate as a particular user.

### Accounts

An account is a collection of data.

All data, other than the Account objects themselves, belong to a single account. A single account may contain an arbitrary set of data, for example a collection of mail, contacts and calendars. Most operations in JMAP are isolated to a single account; there are a few explicit operations to copy data between them. Certain properties are guaranteed for data within the same account, for example uniqueness of ids within a type in that account.

An account is not the same as a user, although it is common for the primary account to directly belong to the user. For example, you may have an account that contains data for a group or business, to which multiple users have access. Users may also have access to accounts belonging to another user if that user is sharing some of their data.

### Data types and records

JMAP provides a uniform interface for creating, retrieving, updating and deleting various types of objects. A **data type** is a collection of named, typed properties, just like the schema for a database table. Each instance of a data type is called a **record**.

## Ids

All object ids are assigned by the server, and are immutable. They MUST be unique among all objects of the **same type** within the **same account**. Ids may clash across accounts, or for two objects of different types within the same account.

Ids are always `String`s. An id MUST be a valid UTF-8 string of at least 1 character in length and maximum 256 bytes in size, but MUST NOT start with the `#` character, as this is reserved for doing back references during object creation (see the *setFoos* description).

## The JMAP API model

All data exchanges are authenticated using an access token. Authentication is covered in section 2.

An authenticated client may exchange data with the server using four different mechanisms:

1. The client may make an API request to the server to get or set structured data. This request consists of an ordered series of method calls. These are processed by the server, which then returns an ordered series of responses. This is described in section 3.
2. The client may download binary files from the server. This is detailed in section 4.
3. The client may upload binary files to the server. This is specified in section 5.
4. The client may connect to a push channel on the server, to be notified when data has changed. This is explained in section 6.
